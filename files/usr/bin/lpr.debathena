#!/usr/bin/python

# lpr.debathena
#
# Wrapper script that intelligently determines whether a command was
# intended for CUPS or LPRng and sends it off in the right direction

import getopt
import os
import shlex
import sys

from debathena import printing

opts = {
    printing.SYSTEM_CUPS: 'EH:U:P:#:hlmo:pqrC:J:T:',
    printing.SYSTEM_LPRNG: 'ABblC:D:F:Ghi:kJ:K:#:m:NP:rR:sT:U:Vw:X:YZ:z1:2:3:4:',
}

def translate_lprng_args_to_cups(args):
    # TODO yell at user if/when we decide that these args are deprecated

    # If getopt fails, something went very wrong -- _we_ generated this
    options, realargs = getopt.gnu_getopt(args, opts[printing.SYSTEM_LPRNG])
    cupsargs = []
    for (o, a) in options:
        if o in ('-b', '-l'):
            cupsargs += [('-l', a)]
        elif o in ('-h'):
            cupsargs += [('-h', a)]
        elif o in ('-J'):
            cupsargs += [('-J', a)]
        elif o in ('-K', '-#'):
            cupsargs += [('-#', a)]
        elif o in ('-P'):
            cupsargs += [('-P', a)]
        elif o in ('-T'):
            cupsargs += [('-T', a)]
        elif o in ('-U'):
            cupsargs += [('-U', a)]
        elif o in ('-Z'):
            if a == 'simplex':
                cupsargs += [('-o', 'sides=one-sided')]
            elif a == 'duplex':
                cupsargs += [('-o', 'sides=two-sided-long-edge')]
            elif a == 'duplexshort':
                cupsargs += [('-o', 'sides=two-sided-short-edge')]
            # TODO attempt to deal banner=staff
        elif o in ('-m'):
            # TODO figure out if CUPS can do mail/zephyr
            pass # Don't warn about this, we probably generated it
        else:
            sys.stderr.write("Warning: option %s%s not converted to CUPS\n"
                             % (o, a))
    joincupsargs = [o + a for o, a in cupsargs] + realargs
    sys.stderr.write("Using cups-lpr %s\n" % ' '.join(joincupsargs))
    return joincupsargs

def main():
    args = sys.argv[1:]
    if 'LPROPT' in os.environ:
        args = shlex.split(os.environ['LPROPT']) + args
        # If we leave LPROPT set, LPRng will count the options twice
        del os.environ['LPROPT']

    optinfos = [(s, opts[s]) for s in printing.SYSTEMS]

    queue = printing.get_default_printer()
    argstyle = None
    try:
        argstyle, options, arguments = printing.parse_args(args, optinfos)

        # Find the queue specified in the arguments
        queue_args, options = printing.extract_opt(options, '-P')
        if queue_args:
            # The last queue specified wins
            queue = queue_args[-1][-1]

        # Deal with zephyr notifications
        zephyr_args, options = printing.extract_opt(options, ['-N'])
        if not zephyr_args and os.environ.get('ATHENA_USER'):
            options.append(('-m', 'zephyr%' + os.environ['ATHENA_USER']))

        # Now that we've sliced up the arguments, put them back
        # together
        args = [o + a for o, a in options] + arguments
    except ValueError:
        # parse_args returned None, so we learned nothing. We'll just
        # go with the default queue
        pass

    if not queue:
        # We tried and couldn't figure it out, so not our problem
        printing.error(2, ("\n"
                           "No default printer configured. Specify a -P option, or configure a\n"
                           "default printer via e.g. System | Administration | Printing.\n"
                           "\n"))

    system, server, queue = printing.find_queue(queue)

    args.insert(0, '-P%s' % queue)
    if server:
        os.environ['CUPS_SERVER'] = server
    if system == printing.SYSTEM_CUPS and argstyle == printing.SYSTEM_LPRNG:
        args = translate_lprng_args_to_cups(args)

    printing.dispatch_command(system, 'lpr', args)

if __name__ == '__main__':
    main()
